CREATE SCHEMA IF NOT EXISTS cooperativa;

CREATE TABLE IF NOT EXISTS COOPERATIVA.usuario_cliente(
	codigo_empleado VARCHAR(8) NOT NULL,
	id_usuario VARCHAR(100) UNIQUE NOT NULL,
	contrasena VARCHAR(1000)  NOT NULL,
	rol BOOLEAN NOT NULL,
	fecha_nacimiento DATE,
	primer_nombre VARCHAR(100) NOT NULL,
	segundo_nombre VARCHAR(100),
	primer_apellido VARCHAR(100) NOT NULL,
	segundo_apellido VARCHAR(100),
	referencia VARCHAR(100),
	ciudad VARCHAR(100),
	avenida VARCHAR(100),
	casa VARCHAR(100),
	departamento VARCHAR(100),
	calle VARCHAR(100),
	correo_primario VARCHAR(100) NOT NULL,
	correo_secundario VARCHAR(100),
	fecha_de_creacion DATE DEFAULT CURRENT_DATE,
	fecha_ultima_actualizacion DATE DEFAULT CURRENT_DATE,
	usuario_creador VARCHAR(8) DEFAULT current_user,
	usuario_modificador VARCHAR(8),
	PRIMARY KEY(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.usuario_telefono(
	telefonos INT NOT NULL,
	codigo_empleado VARCHAR(8) NOT NULL,
	PRIMARY KEY(codigo_empleado, telefonos),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cuenta(
	numero_cuenta VARCHAR(12)  NOT NULL,
	codigo_empleado VARCHAR(8) NOT NULL,
	saldo DECIMAL(10,2) DEFAULT 0,
	tipo VARCHAR(12) NOT NULL,
	fecha_de_creacion DATE DEFAULT CURRENT_DATE,
	fecha_ultima_actualizacion DATE DEFAULT CURRENT_DATE,
	usuario_creador VARCHAR(8),
	usuario_modificador VARCHAR(8),
	PRIMARY KEY(numero_cuenta),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.transaccion(
	codigo_transaccion VARCHAR(100) NOT NULL,
	monto DECIMAL(10,2) DEFAULT 0,
	fecha DATE DEFAULT CURRENT_DATE,
	comentario VARCHAR(256),
	numero_cuenta VARCHAR(12),
	PRIMARY KEY(codigo_transaccion),
	FOREIGN KEY(numero_cuenta) REFERENCES COOPERATIVA.cuenta(numero_cuenta)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.liquidacion(
	numero_liquidacion VARCHAR(8) NOT NULL,
	monto DECIMAL(10,2) DEFAULT 0,
	fecha_de_retiro DATE DEFAULT CURRENT_DATE,
	tipo VARCHAR(8) NOT NULL,
	codigo_empleado VARCHAR(8) NOT NULL,
	PRIMARY KEY(numero_liquidacion),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.transaccion_liquidacion
(
	codigo_transaccion VARCHAR(100) NOT NULL,
	numero_liquidacion VARCHAR(8) NOT NULL,
	PRIMARY KEY(codigo_transaccion),
	FOREIGN KEY(codigo_transaccion) REFERENCES COOPERATIVA.transaccion(codigo_transaccion),
	FOREIGN KEY(numero_liquidacion) REFERENCES COOPERATIVA.liquidacion(numero_liquidacion)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.prestamo(
	numero_prestamos VARCHAR(16)  not NULL,
	monto DECIMAL(10,2) DEFAULT 0,
	fecha_de_creacion DATE DEFAULT CURRENT_DATE,
	saldo DECIMAL(10,2),
	periodos INT DEFAULT 12,
	codigo_empleado VARCHAR(8) NOT NULL,
	fecha_ultima_actualizacion DATE DEFAULT CURRENT_DATE,
	usuario_creador VARCHAR(8),
	usuario_modificador VARCHAR(8),
	PRIMARY KEY(numero_prestamos),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.pagos(
	numero_de_pago VARCHAR(5), 
	capital DECIMAL(10,2),
	interes DOUBLE,
	numero_prestamos VARCHAR(16),
	PRIMARY KEY(numero_de_pago,numero_prestamos),
	FOREIGN KEY(numero_prestamos) REFERENCES COOPERATIVA.prestamo(numero_prestamos)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cierre
(
	id_cierre INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	fecha DATE NOT NULL,
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cierre_pagos
(
	numero_prestamos VARCHAR(16),
	numero_de_pago VARCHAR(5),
	id_cierre INTEGER,
	PRIMARY KEY (numero_prestamos,numero_de_pago),
	FOREIGN KEY(numero_prestamos,numero_de_pago) REFERENCES COOPERATIVA.pagos(numero_prestamos,numero_de_pago),
	FOREIGN KEY(id_cierre) REFERENCES COOPERATIVA.cierre(id_cierre)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cierre_transaccion
(
	codigo_transaccion VARCHAR(100) not null,
	id_cierre INTEGER,
	PRIMARY KEY (codigo_transaccion),
	FOREIGN KEY(codigo_transaccion) REFERENCES COOPERATIVA.transaccion(codigo_transaccion),
	FOREIGN KEY(id_cierre) REFERENCES  COOPERATIVA.cierre(id_cierre)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.dividendos
(
	id_cierre INTEGER,
	id_usuario VARCHAR(8),
	ganancias DECIMAL(100,2),
	porcentaje DOUBLE,
	PRIMARY KEY(id_usuario),
	FOREIGN KEY(id_usuario) REFERENCES COOPERATIVA.usuario_cliente(id_usuario),
	FOREIGN KEY(id_cierre) REFERENCES  COOPERATIVA.cierre(id_cierre)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.liquidacion_pagos
(
	numero_prestamos VARCHAR(16),
	numero_de_pago VARCHAR(5),
	numero_liquidacion VARCHAR(8),
	PRIMARY KEY (numero_prestamos,numero_de_pago),
	FOREIGN KEY(numero_prestamos,numero_de_pago) REFERENCES COOPERATIVA.pagos(numero_prestamos,numero_de_pago),
	FOREIGN KEY(numero_liquidacion) REFERENCES COOPERATIVA.liquidacion(numero_liquidacion)
);

--SEQUENCES
CREATE SEQUENCE IF NOT EXISTS COOPERATIVA.codigo_empleado_seq
	START WITH 1
	INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS COOPERATIVA.seq
	START WITH 1
	INCREMENT BY 1;

--TRIGGERS
DROP TRIGGER IF EXISTS usuario_cliente_tia;
CREATE TRIGGER usuario_cliente_tia
AFTER INSERT ON COOPERATIVA.usuario_cliente
REFERENCING NEW ROW AS oldrow
FOR EACH ROW
BEGIN ATOMIC
  INSERT INTO COOPERATIVA.cuenta(numero_cuenta,codigo_empleado,tipo,usuario_creador)VALUES (CONCAT(oldrow.codigo_empleado,'-CAR'),oldrow.codigo_empleado,'Retirable',oldrow.codigo_empleado);
  INSERT INTO COOPERATIVA.cuenta(numero_cuenta,codigo_empleado,tipo,usuario_creador)  VALUES (CONCAT(oldrow.codigo_empleado,'-CAP'),oldrow.codigo_empleado,'Aportaciones',oldrow.codigo_empleado);
END;

CREATE TRIGGER usuario_cliente_tib
BEFORE INSERT ON COOPERATIVA.usuario_cliente
REFERENCING NEW ROW AS newrow
FOR EACH ROW
BEGIN ATOMIC
  SET newrow.codigo_empleado = CONCAT('AF-', LPAD(NEXT VALUE FOR COOPERATIVA.codigo_empleado_seq, 5, '0'));
END;



--FUNCTIONS
CREATE FUNCTION COOPERATIVA.emp_generador()
RETURNS VARCHAR(8)
CONTAINS SQL
BEGIN ATOMIC
	RETURN CONCAT('AF-', LPAD(NEXT VALUE FOR COOPERATIVA.codigo_empleado_seq, 5, '0'));
END 

CREATE FUNCTION COOPERATIVA.conseguir_num_abono(numero VARCHAR(12))
RETURNS BIGINT
READS SQL DATA
BEGIN ATOMIC
	DECLARE
	num_abono BIGINT;
	SET num_abono = SELECT count(*)
	FROM COOPERATIVA.transaccion
	WHERE numero_cuenta = numero;
	RETURN num_abono + 1;
END;

CREATE FUNCTION COOPERATIVA.conseguir_num_pago(numero VARCHAR(16))
RETURNS BIGINT
READS SQL DATA
BEGIN ATOMIC
	DECLARE
	num_pago BIGINT;
	SET num_pago = SELECT count(*)
	FROM COOPERATIVA.pagos
	WHERE numero_prestamos = numero;
	RETURN num_pago + 1;
END;

--DEFALUT VALUES
INSERT INTO COOPERATIVA.usuario_cliente(ID_USUARIO,CONTRASENA,ROL,PRIMER_NOMBRE,PRIMER_APELLIDO,CORREO_PRIMARIO)
VALUES ('Admin','clave123',TRUE,'Super','Admin','SuperAdmin@gmail.com');


