CREATE SCHEMA IF NOT EXISTS cooperativa;

CREATE TABLE IF NOT EXISTS COOPERATIVA.usuario_cliente(
	codigo_empleado VARCHAR(8) NOT NULL,
	id_usuario VARCHAR(100) UNIQUE NOT NULL,
	contrasena VARCHAR(1000)  NOT NULL,
	rol BOOLEAN NOT NULL,
	fecha_nacimiento DATE,
	primer_nombre VARCHAR(100) NOT NULL,
	segundo_nombre VARCHAR(100),
	primer_apellido VARCHAR(100) NOT NULL,
	segundo_apellido VARCHAR(100),
	referencia VARCHAR(100),
	ciudad VARCHAR(100),
	avenida VARCHAR(100),
	casa VARCHAR(100),
	departamento VARCHAR(100),
	calle VARCHAR(100),
	correo_primario VARCHAR(100) NOT NULL,
	correo_secundario VARCHAR(100),
	fecha_de_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	fecha_ultima_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	usuario_creador VARCHAR(8) DEFAULT current_user,
	usuario_modificador VARCHAR(8),
	PRIMARY KEY(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.usuario_telefono(
	telefonos VARCHAR(8) NOT NULL,
	codigo_empleado VARCHAR(8) NOT NULL,
	PRIMARY KEY(codigo_empleado, telefonos),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cuenta(
	numero_cuenta VARCHAR(12)  NOT NULL,
	codigo_empleado VARCHAR(8) NOT NULL,
	saldo DECIMAL(10,2) DEFAULT 0,
	tipo VARCHAR(12) NOT NULL,
	fecha_de_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	fecha_ultima_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	usuario_creador VARCHAR(8),
	usuario_modificador VARCHAR(8),
	PRIMARY KEY(numero_cuenta),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.transaccion(
	codigo_transaccion VARCHAR(100) NOT NULL,
	monto DECIMAL(10,2) DEFAULT 0,
	fecha TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	comentario VARCHAR(256),
	numero_cuenta VARCHAR(12) NOT null,
	PRIMARY KEY(codigo_transaccion),
	FOREIGN KEY(numero_cuenta) REFERENCES COOPERATIVA.cuenta(numero_cuenta)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.liquidacion(
	numero_liquidacion VARCHAR(9) NOT NULL,
	monto DECIMAL(10,2) DEFAULT 0,
	fecha_de_retiro TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	tipo VARCHAR(8) NOT NULL,
	codigo_empleado VARCHAR(8) NOT NULL,
	PRIMARY KEY(numero_liquidacion),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.transaccion_liquidacion
(
	codigo_transaccion VARCHAR(100),
	numero_liquidacion VARCHAR(9) NOT NULL,
	PRIMARY KEY(codigo_transaccion),
	FOREIGN KEY(codigo_transaccion) REFERENCES COOPERATIVA.transaccion(codigo_transaccion),
	FOREIGN KEY(numero_liquidacion) REFERENCES COOPERATIVA.liquidacion(numero_liquidacion)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.prestamo(
	numero_prestamos VARCHAR(16)  not NULL,
	monto DECIMAL(10,2) DEFAULT 0,
	fecha_de_creacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	saldo DECIMAL(10,2),
	periodos INT DEFAULT 12,
	codigo_empleado VARCHAR(8) NOT NULL,
	fecha_ultima_actualizacion TIMESTAMP DEFAULT CURRENT_TIMESTAMP,
	usuario_creador VARCHAR(8),
	usuario_modificador VARCHAR(8),
	PRIMARY KEY(numero_prestamos),
	FOREIGN KEY(codigo_empleado) REFERENCES COOPERATIVA.usuario_cliente(codigo_empleado)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.pagos(
	numero_de_pago VARCHAR(5), 
	capital DECIMAL(10,2),
	interes DOUBLE,
	numero_prestamos VARCHAR(16),
	PRIMARY KEY(numero_de_pago,numero_prestamos),
	FOREIGN KEY(numero_prestamos) REFERENCES COOPERATIVA.prestamo(numero_prestamos)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cierre
(
	id_cierre INTEGER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
	fecha DATE DEFAULT CURRENT_DATE NOT NULL,
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cierre_pagos
(
	numero_prestamos VARCHAR(16),
	numero_de_pago VARCHAR(5),
	id_cierre INTEGER,
	PRIMARY KEY (numero_prestamos,numero_de_pago),
	FOREIGN KEY(numero_prestamos,numero_de_pago) REFERENCES COOPERATIVA.pagos(numero_prestamos,numero_de_pago),
	FOREIGN KEY(id_cierre) REFERENCES COOPERATIVA.cierre(id_cierre)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.cierre_transaccion
(
	codigo_transaccion VARCHAR(100),
	id_cierre INTEGER,
	PRIMARY KEY (codigo_transaccion),
	FOREIGN KEY(codigo_transaccion) REFERENCES COOPERATIVA.transaccion(codigo_transaccion),
	FOREIGN KEY(id_cierre) REFERENCES  COOPERATIVA.cierre(id_cierre)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.dividendos
(
	id_cierre INTEGER,
	id_usuario VARCHAR(8),
	ganancias DECIMAL(100,2),
	porcentaje DOUBLE,
	PRIMARY KEY(id_usuario),
	FOREIGN KEY(id_usuario) REFERENCES COOPERATIVA.usuario_cliente(id_usuario),
	FOREIGN KEY(id_cierre) REFERENCES  COOPERATIVA.cierre(id_cierre)
);

CREATE TABLE IF NOT EXISTS COOPERATIVA.liquidacion_pagos
(
	numero_prestamos VARCHAR(16),
	numero_de_pago VARCHAR(5),
	numero_liquidacion VARCHAR(9),
	PRIMARY KEY (numero_prestamos,numero_de_pago),
	FOREIGN KEY(numero_prestamos,numero_de_pago) REFERENCES COOPERATIVA.pagos(numero_prestamos,numero_de_pago),
	FOREIGN KEY(numero_liquidacion) REFERENCES COOPERATIVA.liquidacion(numero_liquidacion)
);

--SEQUENCES
CREATE SEQUENCE IF NOT EXISTS COOPERATIVA.codigo_empleado_seq
	START WITH 1
	INCREMENT BY 1;

CREATE SEQUENCE IF NOT EXISTS COOPERATIVA.liquidacion_seq
	START WITH 1
	INCREMENT BY 1;

--FUNCTIONS
CREATE FUNCTION COOPERATIVA.emp_generador()
RETURNS VARCHAR(8)
CONTAINS SQL
BEGIN ATOMIC
	RETURN CONCAT('AF-', LPAD(NEXT VALUE FOR COOPERATIVA.codigo_empleado_seq, 5, '0'));
END 

CREATE FUNCTION COOPERATIVA.conseguir_num_abono(numero VARCHAR(12))
RETURNS BIGINT
READS SQL DATA
BEGIN ATOMIC
	DECLARE
	num_abono BIGINT;
	SET num_abono = SELECT count(*)
	FROM COOPERATIVA.transaccion
	WHERE numero_cuenta = numero;
	RETURN num_abono + 1;
END;

CREATE FUNCTION COOPERATIVA.conseguir_num_pago(numero VARCHAR(16))
RETURNS BIGINT
READS SQL DATA
BEGIN ATOMIC
	DECLARE
	num_pago BIGINT;
	SET num_pago = SELECT count(*)
	FROM COOPERATIVA.pagos
	WHERE numero_prestamos = numero;
	RETURN num_pago + 1;
END;

CREATE FUNCTION COOPERATIVA.conseguir_num_prestamo(numero VARCHAR(8))
RETURNS BIGINT
READS SQL DATA
BEGIN ATOMIC
	DECLARE
	num_prestamo BIGINT;
	SET num_prestamo = SELECT count(*)
	FROM COOPERATIVA.prestamo
	WHERE codigo_empleado = numero;
	RETURN num_prestamo + 1;
END;


CREATE VIEW IF NOT EXISTS COOPERATIVA.respaldo_usuario AS (SELECT * FROM COOPERATIVA.usuario_cliente WHERE 1=0) WITH CHECK OPTION;
CREATE VIEW IF NOT EXISTS COOPERATIVA.respaldo_usuario_telefono AS (SELECT * FROM COOPERATIVA.usuario_telefono WHERE 1=0) WITH CHECK OPTION;
CREATE VIEW IF NOT EXISTS COOPERATIVA.respaldo_cuenta AS (SELECT * FROM COOPERATIVA.cuenta WHERE 1=0) WITH CHECK OPTION;
CREATE VIEW IF NOT EXISTS COOPERATIVA.respaldo_transaccion AS (SELECT * FROM COOPERATIVA.transaccion WHERE 1=0) WITH CHECK OPTION;


--TRIGGERS
DROP TRIGGER IF EXISTS usuario_cliente_tia;
CREATE TRIGGER usuario_cliente_tia
AFTER INSERT ON COOPERATIVA.usuario_cliente
REFERENCING NEW ROW AS oldrow
FOR EACH ROW
BEGIN ATOMIC
  INSERT INTO COOPERATIVA.cuenta(numero_cuenta,codigo_empleado,tipo,usuario_creador)VALUES (CONCAT(oldrow.codigo_empleado,'-CAR'),oldrow.codigo_empleado,'Retirable',oldrow.codigo_empleado);
  INSERT INTO COOPERATIVA.cuenta(numero_cuenta,codigo_empleado,tipo,usuario_creador)  VALUES (CONCAT(oldrow.codigo_empleado,'-CAP'),oldrow.codigo_empleado,'Aportaciones',oldrow.codigo_empleado);
END;

CREATE TRIGGER usuario_cliente_tib
BEFORE INSERT ON COOPERATIVA.usuario_cliente
REFERENCING NEW ROW AS newrow
FOR EACH ROW
BEGIN ATOMIC
  SET newrow.codigo_empleado = CONCAT('AF-', LPAD(NEXT VALUE FOR COOPERATIVA.codigo_empleado_seq, 5, '0'));
END;

DROP TRIGGER IF EXISTS liquidacion_tib;
CREATE TRIGGER liquidacion_tib
BEFORE INSERT ON COOPERATIVA.liquidacion
REFERENCING NEW ROW AS newrow
FOR EACH ROW
BEGIN ATOMIC
	SET newrow.numero_liquidacion = CONCAT('LIQ-', LPAD(NEXT VALUE FOR COOPERATIVA.liquidacion_seq, 5,'0'));
END;

CREATE TRIGGER prestamo_tib
BEFORE INSERT ON COOPERATIVA.prestamo
REFERENCING NEW ROW AS newrow
FOR EACH ROW 
BEGIN ATOMIC
	SET newrow.numero_prestamos = CONCAT(newrow.codigo_empleado, CONCAT('-',COOPERATIVA.conseguir_num_prestamo(newrow.codigo_empleado)));
END;

CREATE TRIGGER  transaccion_tib
BEFORE INSERT ON COOPERATIVA.transaccion
REFERENCING NEW ROW AS newrow
FOR EACH ROW 
BEGIN ATOMIC
	SET  newrow.codigo_transaccion = CONCAT(newrow.numero_cuenta, CONCAT('-',COOPERATIVA.conseguir_num_abono(newrow.numero_cuenta)));
END;

CREATE TRIGGER pagos_tib
BEFORE INSERT ON COOPERATIVA.pagos
REFERENCING NEW ROW AS newrow
FOR EACH ROW 
BEGIN ATOMIC
	SET newrow.numero_de_pago = CONCAT(newrow.numero_prestamos, CONCAT('-',COOPERATIVA.conseguir_num_pago(newrow.numero_prestamos)));
END;

CREATE TRIGGER usuario_cliente_tda
AFTER DELETE ON COOPERATIVA.usuario_cliente
REFERENCING old ROW AS oldrow
FOR EACH ROW
BEGIN ATOMIC
	INSERT INTO COOPERATIVA.respaldo_usuario (
        codigo_empleado, id_usuario, contrasena, rol, fecha_nacimiento, 
        primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, referencia, 
        ciudad, avenida, casa, departamento, calle, 
        correo_primario, correo_secundario, fecha_de_creacion, 
        fecha_ultima_actualizacion, usuario_creador, usuario_modificador
    ) VALUES (
        oldrow.codigo_empleado, oldrow.id_usuario, oldrow.contrasena, oldrow.rol, oldrow.fecha_nacimiento, 
        oldrow.primer_nombre, oldrow.segundo_nombre, oldrow.primer_apellido, oldrow.segundo_apellido, oldrow.referencia, 
        oldrow.ciudad, oldrow.avenida, oldrow.casa, oldrow.departamento, oldrow.calle, 
        oldrow.correo_primario, oldrow.correo_secundario, oldrow.fecha_de_creacion, 
        oldrow.fecha_ultima_actualizacion, oldrow.usuario_creador, oldrow.usuario_modificador
    );
END;


--PROCEDURE
CREATE PROCEDURE COOPERATIVA.crear_usuario(codigo_empleado VARCHAR(8),
	id_usuario VARCHAR(100),
	contrasena VARCHAR(1000),
	rol BOOLEAN,
	fecha_nacimiento DATE,
	primer_nombre VARCHAR(100),
	segundo_nombre VARCHAR(100),
	primer_apellido VARCHAR(100),
	segundo_apellido VARCHAR(100),
	referencia VARCHAR(100),
	ciudad VARCHAR(100),
	avenida VARCHAR(100),
	casa VARCHAR(100),
	departamento VARCHAR(100),
	calle VARCHAR(100),
	correo_primario VARCHAR(100),
	correo_secundario VARCHAR(100),
	creador VARCHAR(8))
MODIFIES SQL DATA
BEGIN ATOMIC
	INSERT INTO COOPERATIVA.usuario_cliente(codigo_empleado, id_usuario, contrasena, rol, fecha_nacimiento, 
        primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, referencia, 
        ciudad, avenida, casa, departamento, calle, 
        correo_primario, correo_secundario,usuario_creador) VALUES
	(codigo_empleado, id_usuario, contrasena, rol, fecha_nacimiento, 
        primer_nombre, segundo_nombre, primer_apellido, segundo_apellido, referencia, 
        ciudad, avenida, casa, departamento, calle, 
        correo_primario, correo_secundario, creador);
END;

CREATE PROCEDURE COOPERATIVA.actualizar_usuario(
    usuario VARCHAR(100),
    contrasena VARCHAR(1000),
    rol BOOLEAN,
    fecha_nacimiento DATE,
    primer_nombre VARCHAR(100),
    segundo_nombre VARCHAR(100),
    primer_apellido VARCHAR(100),
    segundo_apellido VARCHAR(100),
    referencia VARCHAR(100),
    ciudad VARCHAR(100),
    avenida VARCHAR(100),
    casa VARCHAR(100),
    departamento VARCHAR(100),
    calle VARCHAR(100),
    correo_primario VARCHAR(100),
    correo_secundario VARCHAR(100),
    modificador VARCHAR(8)
)
MODIFIES SQL DATA
BEGIN ATOMIC
    UPDATE COOPERATIVA.usuario_cliente
    SET 
        contrasena = contrasena,
        rol = rol,
        fecha_nacimiento = fecha_nacimiento,
        primer_nombre = primer_nombre,
        segundo_nombre = segundo_nombre,
        primer_apellido = primer_apellido,
        segundo_apellido = segundo_apellido,
        referencia = referencia,
        ciudad = ciudad,
        avenida = avenida,
        casa = casa,
        departamento = departamento,
        calle = calle,
        correo_primario = correo_primario,
        correo_secundario = correo_secundario,
        usuario_modificador = modificador,
		fecha_ultima_actualizacion = CURRENT_TIMESTAMP
        WHERE id_usuario = usuario;

END;

CREATE FUNCTION COOPERATIVA.obtener_usuario_por_id(usuario VARCHAR(100))
RETURNS TABLE (
    codigo_empleado VARCHAR(8),
    id_usuario VARCHAR(100),
    contrasena VARCHAR(1000),
    rol BOOLEAN,
    fecha_nacimiento DATE,
    primer_nombre VARCHAR(100),
    segundo_nombre VARCHAR(100),
    primer_apellido VARCHAR(100),
    segundo_apellido VARCHAR(100),
    referencia VARCHAR(100),
    ciudad VARCHAR(100),
    avenida VARCHAR(100),
    casa VARCHAR(100),
    departamento VARCHAR(100),
    calle VARCHAR(100),
    correo_primario VARCHAR(100),
    correo_secundario VARCHAR(100),
    fecha_de_creacion TIMESTAMP,
    fecha_ultima_actualizacion TIMESTAMP,
    usuario_creador VARCHAR(8),
    usuario_modificador VARCHAR(8)
)
READS SQL DATA
BEGIN ATOMIC
    RETURN TABLE
        (SELECT 
           *
        FROM COOPERATIVA.usuario_cliente
        WHERE id_usuario = usuario);
    
END;

CREATE PROCEDURE COOPERATIVA.crear_usuario_telefono(codigo_emp VARCHAR(8), telef VARCHAR(8))
MODIFIES SQL DATA
BEGIN ATOMIC
	INSERT INTO COOPERATIVA.usuario_telefono(codigo_empleado,telefonos) VALUES (codigo_emp, telef);
END;

CREATE FUNCTION COOPERATIVA.obtener_usuario_telefono(codigo_emp VARCHAR(8))
RETURNS TABLE
(
	codigo_empleado VARCHAR(8), telefonos VARCHAR(8)
)
READS SQL DATA
BEGIN ATOMIC 
	RETURN TABLE (SELECT * FROM COOPERATIVA.usuario_telefono WHERE codigo_empleado = codigo_emp);
END;

CREATE FUNCTION COOPERATIVA.obtener_cuenta(codigo_emp VARCHAR(8))
RETURNS TABLE
(
	numero_cuenta VARCHAR(12),
	saldo DECIMAL(10,2)
)
READS SQL DATA
BEGIN ATOMIC
	RETURN TABLE (SELECT numero_cuenta, saldo FROM COOPERATIVA.cuenta WHERE codigo_empleado = codigo_emp);
END;

CREATE PROCEDURE COOPERATIVA.crear_transaccion(num_cuenta VARCHAR(12), sald DECIMAL(10,2), descrip VARCHAR(256))
MODIFIES SQL DATA
BEGIN ATOMIC
		INSERT INTO COOPERATIVA.transaccion(monto, comentario, numero_cuenta) VALUES(sald,descrip,num_cuenta);
		UPDATE COOPERATIVA.cuenta c SET c.saldo = c.saldo + sald WHERE c.numero_cuenta = num_cuenta;
END;

CREATE PROCEDURE COOPERATIVA.modificar_cuenta(num_cuenta VARCHAR(12), sald DECIMAL(10,2), cod_emp VARCHAR(8))
MODIFIES SQL DATA
BEGIN ATOMIC
	UPDATE COOPERATIVA.cuenta c 
	SET c.saldo = sald, c.fecha_ultima_actualizacion = CURRENT_TIMESTAMP, c.usuario_modificador = cod_emp 
	WHERE c.numero_cuenta = num_cuenta;
END;

CREATE PROCEDURE COOPERATIVA.crear_liquidacion_parcial(cod_emp VARCHAR(8),retiro DECIMAL(10,2))
MODIFIES SQL DATA
BEGIN ATOMIC
	DECLARE func VARCHAR(100) DEFAULT '';
	DECLARE liq VARCHAR(9) DEFAULT '';
	DECLARE num_cuenta VARCHAR(12);
	INSERT INTO COOPERATIVA.liquidacion(monto,tipo,codigo_empleado) VALUES(retiro,'Parcial',cod_emp);
	
	SELECT numero_cuenta INTO num_cuenta FROM COOPERATIVA.cuenta WHERE cod_emp = codigo_empleado AND tipo = 'Retirable';
	
	CALL COOPERATIVA.crear_transaccion(num_cuenta,retiro*(-1),'Retiro Parcial');

	SET func = (SELECT t.codigo_transaccion
	FROM COOPERATIVA.transaccion t WHERE num_cuenta = t.numero_cuenta 
	ORDER BY t.fecha DESC LIMIT 1);
	
	SET liq = (SELECT numero_liquidacion 
    FROM COOPERATIVA.liquidacion 
    WHERE codigo_empleado = cod_emp ORDER BY fecha_de_retiro DESC LIMIT 1);
 	
	INSERT INTO COOPERATIVA.transaccion_liquidacion(codigo_transaccion, NUMERO_LIQUIDACION) VALUES(func,liq);
END;


--DEFAULT VALUES
INSERT INTO COOPERATIVA.usuario_cliente(ID_USUARIO,CONTRASENA,ROL,PRIMER_NOMBRE,PRIMER_APELLIDO,CORREO_PRIMARIO)
VALUES ('Admin','clave123',TRUE,'Super','Admin','SuperAdmin@gmail.com');
